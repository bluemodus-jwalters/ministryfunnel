@model MinistryFunnel.FrontEnd.Models.DropDowns.MinistryEditViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit Ministry</h2>

<style>
    .required::after {
        content: " *";
        font-weight: bold;
        color: red;
    }

    .hide {
        display: none
    }
</style>


@if (Model != null)
{
    using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @Html.LabelFor(model => model.Event, htmlAttributes: new { @class = "control-label col-md-2 required" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Event, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Event, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Purpose, htmlAttributes: new { @class = "control-label col-md-2 required" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Purpose, new { htmlAttributes = new { @class = "form-control", rows = "5" } })
                    @Html.ValidationMessageFor(model => model.Purpose, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DesiredOutcome, htmlAttributes: new { @class = "control-label col-md-2 required" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DesiredOutcome, new { htmlAttributes = new { @class = "form-control", rows = "5" } })
                    @Html.ValidationMessageFor(model => model.DesiredOutcome, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MinistryOwnerId, htmlAttributes: new { @class = "control-label col-md-2 required" })
                <div class="col-md-10">
                    @Html.DropDownListFor(t => t.MinistryOwnerId, Model.MinistryOwners, "Please Select", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MinistryOwnerId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PracticeId, htmlAttributes: new { @class = "control-label col-md-2 required" })
                <div class="col-md-10">
                    @Html.DropDownListFor(t => t.PracticeId, Model.Practices, "Please Select", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.PracticeId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FunnelId, htmlAttributes: new { @class = "control-label col-md-2 required" })
                <div class="col-md-10">
                    @Html.DropDownListFor(t => t.FunnelId, Model.Funnels, "Please Select", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.FunnelId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CampusId, htmlAttributes: new { @class = "control-label col-md-3 required" })
                <div class="col-md-10">
                    @Html.DropDownListFor(t => t.CampusId, Model.Campuses, "Please Select", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CampusId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.LocationId, htmlAttributes: new { @class = "control-label col-md-2 required" })
                <div class="col-md-10">
                    @Html.DropDownListFor(t => t.LocationId, Model.Locations, "Please Select", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FrequencyId, htmlAttributes: new { @class = "control-label col-md-2 required" })
                <div class="col-md-10">
                    @Html.DropDownListFor(t => t.FrequencyId, Model.Frequencies, "Please Select", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.FrequencyId, "", new { @class = "text-danger" })
                </div>
            </div>

            <!-- -->
            <div class="form-group">
                @Html.LabelFor(m => m.StartDate, new { @class = "col-md-2 control-label required" })
                <div class="col-md-10">
                    <input class="form-control" type="text" name="StartDate" id="startdatetime" value="@Model.StartDate" />
                    @Html.ValidationMessageFor(m => m.StartDate, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(m => m.EndDate, new { @class = "col-md-2 control-label required" })
                <div class="col-md-10">
                    <input class="form-control" type="text" name="EndDate" id="enddatetime" value="@Model.EndDate" />
                    @Html.ValidationMessageFor(m => m.EndDate, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.KidCare, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList(
                         "KidCare", new SelectList(
                                 new[]
                                 {
                                    new { Value = "false", Text = "No" },
                                    new { Value = "true", Text = "Yes" },
                                 }, "Value", "Text", Model
                             )
                         , new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.KidCare, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SelectedResourceInvolvementIds, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-6">
                    @Html.ListBoxFor(t => t.SelectedResourceInvolvementIds, Model.ResourceInvolvements, new { @class = "form-control input-md multipleSelect" })
                    @Html.ValidationMessageFor(model => model.SelectedResourceInvolvementIds, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UpInOutIds, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.ListBoxFor(t => t.UpInOutIds, Model.UpInOuts, new { @class = "form-control input-md multipleSelect" })
                    @Html.ValidationMessageFor(model => model.UpInOutIds, "", new { @class = "text-danger" })
                </div>
            </div>




            <div class="form-group">
                @Html.LabelFor(model => model.LevelOfImportanceId, htmlAttributes: new { @class = "control-label col-md-2 required" })
                <div class="col-md-10">
                    @Html.DropDownListFor(t => t.LevelOfImportanceId, Model.LevelOfImportances, "Please Select", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.LevelOfImportanceId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BigRock, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList(
                         "BigRock", new SelectList(
                                 new[]
                                 {
                                    new { Value = "false", Text = "No" },
                                    new { Value = "true", Text = "Yes" },
                                 }, "Value", "Text", Model
                             )
                         , new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.BigRock, "", new { @class = "text-danger" })
                </div>
            </div>

            @if (Model.CanApprove)
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.ApprovalId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(t => t.ApprovalId, Model.Approvals, "Please Select", Model.CanApprove ? new { @class = "form-control" } as object : new { @class = "form-control", disabled = "disabled" } as object)
                        @Html.ValidationMessageFor(model => model.ApprovalId, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                @Html.HiddenFor(model => model.ApprovalId, Model.ApprovalId)
            }

            <div class="form-group">
                @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" style="visibility: hidden; height: 0px;">
                @Html.LabelFor(model => model.Archived, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList(
                         "Archived", new SelectList(
                                 new[]
                                 {
                                    new { Value = "false", Text = "No" },
                                    new { Value = "true", Text = "Yes" },
                                 }, "Value", "Text", Model
                             )
                         , new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Archived, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-success" />
                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#cloneModal">
                        Clone
                    </button>
                    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-info" })
                </div>
            </div>
        </div>

        <div id="alertId" class="alert alert-success fade in hide">
            <p>Text here</p>
        </div>

        <div>
            <!-- Button trigger modal -->
            

            <!-- Modal -->
            <div class="modal fade" id="cloneModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title" id="myModalLabel">Clone Event</h3>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <h5>Clone @Model.Event</h5>
                            <h6>Happening on @Model.StartDate</h6>
                            <form id="dateForm">
                                <div class="mb-3">
                                    <label for="dateInput" class="form-label">Date:</label>
                                    @*<input type="text" class="form-control cloneddate" id="dateInput" required>*@
                                    <input class="form-control cloneddate" type="text" name="InitialClonedDate" id="InitialClonedDate" required value="@Model.StartDate" />
                                </div>
                                <div id="dateContainer"></div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" onclick="addDate()">Add Date</button>
                            <button id="cloneModalButton" type="button" class="btn btn-success" onclick="submitDates()">Clone</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <h3> This was not a valid ID to edit.</h3>
}


<script type="text/javascript">
    $(document).ready(function () {
        $('.multipleSelect').selectpicker();
    });


    $(document).ready(function () {
        $('#startdatetime').datetimepicker({
            format: 'MM/DD/YYYY LT',
            showTodayButton: true,
            showClose: true,
            showClear: true,
            toolbarPlacement: 'top',
            stepping: 30,
            icons: {
                time: 'fa fa-clock',
                date: 'fa fa-calendar',
                up: 'fa fa-chevron-up',
                down: 'fa fa-chevron-down',
                previous: 'fa fa-chevron-left',
                next: 'fa fa-chevron-right',
                today: 'fa fa-check',
                clear: 'fa fa-trash',
                close: 'fa fa-times'
            }
        });

        $('#enddatetime').datetimepicker({
            format: 'MM/DD/YYYY LT',
            showTodayButton: true,
            showClose: true,
            showClear: true,
            toolbarPlacement: 'top',
            stepping: 30,
            icons: {
                time: 'fa fa-clock',
                date: 'fa fa-calendar',
                up: 'fa fa-chevron-up',
                down: 'fa fa-chevron-down',
                previous: 'fa fa-chevron-left',
                next: 'fa fa-chevron-right',
                today: 'fa fa-check',
                clear: 'fa fa-trash',
                close: 'fa fa-times'
            }
        });

        $('#InitialClonedDate').datetimepicker({
            format: 'MM/DD/YYYY LT',
            showTodayButton: true,
            showClose: true,
            showClear: true,
            toolbarPlacement: 'top',
            stepping: 30,
            icons: {
                time: 'fa fa-clock',
                date: 'fa fa-calendar',
                up: 'fa fa-chevron-up',
                down: 'fa fa-chevron-down',
                previous: 'fa fa-chevron-left',
                next: 'fa fa-chevron-right',
                today: 'fa fa-check',
                clear: 'fa fa-trash',
                close: 'fa fa-times'
            }
        });
    });

    
    let dateCount = 1;

    function addDate() {
        if (dateCount <= 30) {
            const dateInput = '@Model.StartDate';//document.getElementById('dateInput').value;
            const dateContainer = document.getElementById('dateContainer');

            const dateElement = document.createElement('div');
            dateElement.classList.add('mb-3');
            dateElement.innerHTML = `
                <label for="dateInput${dateCount}" class="form-label">Date:</label>
                <input type="text" class="form-control cloneddate" name="cloneddate" id="dateInput${dateCount}" value="${dateInput}" required>`;

            

            dateContainer.appendChild(dateElement);

            dateTimeBox()
            dateCount++;
        } else {
            // Optional: Show an error message when the maximum number of dates is reached
            alert('Maximum number of dates reached.');
        }
    }

    function dateTimeBox() {
        $(".cloneddate").datetimepicker({
            format: 'MM/DD/YYYY LT',
            showTodayButton: true,
            showClose: true,
            showClear: true,
            toolbarPlacement: 'top',
            stepping: 30,
            icons: {
                time: 'fa fa-clock',
                date: 'fa fa-calendar',
                up: 'fa fa-chevron-up',
                down: 'fa fa-chevron-down',
                previous: 'fa fa-chevron-left',
                next: 'fa fa-chevron-right',
                today: 'fa fa-check',
                clear: 'fa fa-trash',
                close: 'fa fa-times'
            }
        });
    }

    function submitDates() {
        var dateInputs = Array.from(document.querySelectorAll('.cloneddate'));
        var dateInputStringArray = [];
        var validInput = true;
        var originalEventDate = new Date('@Model.StartDate');

        dateInputs.forEach(date => {
            var clonedDateObject = new Date(date.value);
            if (clonedDateObject > originalEventDate && clonedDateObject !== originalEventDate) {
                dateInputStringArray.push(date.value);
            }
            else {
                alert("All dates need to be after or not the same as the original event date.")
                validInput = false;
            }
        });

        

        if (validInput) {
            $("#cloneModalButton").prop("disabled", true);
            $.post("/Ministry/Clone", { dates: dateInputStringArray, ministryId: @Model.Id }, function (data) {
                $("#cloneModalButton").prop("disabled", false);
                $('.modal').modal('toggle');
                alert(data);
            });
        }
    }

</script>
