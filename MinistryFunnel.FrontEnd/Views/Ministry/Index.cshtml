@model IEnumerable<MinistryFunnel.FrontEnd.Models.MinistryFrontEndViewModelMinimal>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<div class="container-fluid" style="padding-left:0px;">
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Event)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Purpose)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.MinistryOwnerName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.LocationName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CampusName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StartDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ApprovalName)
                </th>
                <th class="sorter-false filter-false"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Event)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Purpose)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.MinistryOwnerName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LocationName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CampusName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.StartDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ApprovalName)
                    </td>
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id = item.Id }) <br />
                        @Html.ActionLink("Details", "Details", new { id = item.Id }) <br />
                        @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


<script type="text/javascript">
    //https://mottie.github.io/tablesorter/docs/example-option-theme-bootstrap-v4.html
    $(function () {

        $("table").tablesorter({
            theme: "bootstrap",

            widthFixed: true,

            // widget code contained in the jquery.tablesorter.widgets.js file
            // use the zebra stripe widget if you plan on hiding any rows (filter widget)
            // the uitheme widget is NOT REQUIRED!
            widgets: ["filter", "columns", "zebra"],

            widgetOptions: {
                // using the default zebra striping class name, so it actually isn't included in the theme variable above
                // this is ONLY needed for bootstrap theming if you are using the filter widget, because rows are hidden
                zebra: ["even", "odd"],

                // class names added to columns when sorted
                columns: ["primary", "secondary", "tertiary"],

                // reset filters button
                filter_reset: ".reset",

                // extra css class name (string or array) added to the filter element (input or select)
                filter_cssFilter: [
                    'form-control',
                    'form-control',
                    'form-control', // select needs custom class names :(
                    'form-control',
                    'form-control',
                    'form-control'
                ]

            }
        })
            .tablesorterPager({

                // target the pager markup - see the HTML block below
                container: $(".ts-pager"),

                // target the pager page select dropdown - choose a page
                cssGoto: ".pagenum",

                // remove rows from the table to speed up the sort of large tables.
                // setting this to false, only hides the non-visible rows; needed if you plan to add/remove rows with the pager enabled.
                removeRows: false,

                // output string - default is '{page}/{totalPages}';
                // possible variables: {page}, {totalPages}, {filteredPages}, {startRow}, {endRow}, {filteredRows} and {totalRows}
                output: '{startRow} - {endRow} / {filteredRows} ({totalRows})'

            });

    });
</script>